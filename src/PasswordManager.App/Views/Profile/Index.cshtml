@model IEnumerable<PasswordManager.App.Models.ProfileModel>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Profile/_Layout.cshtml";
}

<h2>User Profiles</h2>

<ul class="profile-list">
    <li>
        <button class="profile-title">
            + Add New Profile
        </button>
        @Html.Partial("_CreatePartial", new PasswordManager.App.Models.ProfileModel())
    </li>

    @foreach (var item in Model)
    {
        <li>
            <button class="profile-title">
                @Html.DisplayFor(modelItem => item.Title)
            </button>
            <div class="profile-detail-group">
                <div class="profile-details">
                    <h4>@Html.DisplayNameFor(model => model.Website):</h4>
                    @Html.TextBoxFor(modelItem => item.Website, new { @class = "profile-textbox" })

                    <h4>@Html.DisplayNameFor(model => model.LoginName):</h4>
                    @Html.TextBoxFor(modelItem => item.LoginName, new { @class = "profile-textbox" })

                    <h4>@Html.DisplayNameFor(model => model.Password):</h4>
                    @Html.TextBoxFor(modelItem => item.Password, new { @class = "profile-textbox" })

                    <h4>@Html.DisplayNameFor(model => model.SignUpEmail):</h4>
                    @Html.TextBoxFor(modelItem => item.SignUpEmail, new { @class = "profile-textbox" })

                    <h4>@Html.DisplayNameFor(model => model.AgeOfPassword):</h4>
                    @Html.TextBoxFor(modelItem => item.AgeOfPassword, new { @class = "profile-textbox" })
                </div>

                @Html.ValidationSummary(false, "", new { @class = "form-message" })
            </div>
        </li>
    }
</ul>

@section Scripts {
    <script>
        const details = document.querySelectorAll('.profile-detail-group');
        const titleBtns = document.querySelectorAll('.profile-title');
        let currentBtn = null;
        let currentDtls;

        collapseAll();

        titleBtns.forEach((btn, index) => btn.addEventListener('click', (e) => {
            
            if (currentBtn != null) {
                // Animate transition
                currentDtls.style.maxHeight = null;
                // Turn off displays
                currentBtn.style.border = 'none';
            }

            if (currentBtn != btn) {
                currentBtn = btn;
                currentDtls = details[index];
                // Turn on displays
                currentBtn.style.border = 'solid 4px var(--accent-color)';
                currentDtls.style.display = 'flex';
                // Animate transition
                currentDtls.style.maxHeight = currentDtls.scrollHeight + 'px';
            }
            else {
                currentBtn = null;
            }
        }));

        function collapseAll() {
            details.forEach((item) => {
                item.style.maxHeight = null;
            });
        };

    </script>
}